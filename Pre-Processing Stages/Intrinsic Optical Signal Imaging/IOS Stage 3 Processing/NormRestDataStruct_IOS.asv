function [RestData] = NormRestDataStruct_IOS(RestData,RestingBaselines,baselineType)
%________________________________________________________________________________________________________________________
% Written by Kevin L. Turner
% The Pennsylvania State University, Dept. of Biomedical Engineering
% https://github.com/KL-Turner
%________________________________________________________________________________________________________________________
animalID = RestingBaselines.(baselineType).baselineFileInfo.animalID;
dataTypes = fieldnames(RestData);
for dT = 1:length(dataTypes)
    dataType = char(dataTypes(dT));
    hemisphereDataTypes = fieldnames(RestData.(dataType));
    for hDT = 1:length(hemisphereDataTypes)
        hemDataType = char(hemisphereDataTypes(hDT));
        if any(strcmp(dataType,{'HbT','HbO','HbR'})) == true % don't normalize, but keep field name for convenience
            RestData.(dataType).(hemDataType).NormData = RestData.(dataType).(hemDataType).data;
        else
            NormData = RestData.(dataType).(hemDataType)..data;
            [uniqueDays,~,~] = GetUniqueDays_IOS(RestData.(dataType).(hemDataType).fileDates);
            for uD = 1:length(uniqueDays)
                date = uniqueDays{uD};
                strDay = ConvertDate_IOS(date);
                [~,dayInds] = GetDayInds_IOS(RestData.(dataType).(hemDataType).fileDates,date);
                disp(['Normalizing ' (hemDataType) ' ' (dataType) ' for ' (strDay) '...']); disp(' ')
                % calculate the baseline differently depending on data type
                if iscell(RestData.(dataType).(hemDataType).data)
                    dayData = RestData.(dataType).(hemDataType).data(dayInds);
                    normDayData = cell(size(dayData));
                    dayBaseline = RestingBaselines.(baselineType).(dataType).(hemDataType).(strDay).mean;
                    for dD = 1:size(dayData,1)
                        cellBase = dayBaseline*ones(1,size(dayData{dD},2));
                        normDayData{dD,1} = dayData{dD,1}./cellBase - 1;
                    end
                    restData(dayInds) = normDayData;
                else
                    try
                        dayBaseline = RestingBaselines.(baselineType).(dataType).(hemDataType).(strDay).mean;
                    catch
                        if strcmp(hemDataType,'LH_gammaBandPower') == true
                            dayBaseline = RestingBaselines.(baselineType).cortical_LH.gammaBandPower.(strDay).mean;
                            keyboard
                        elseif strcmp(hemDataType,'RH_gammaBandPower') == true
                            dayBaseline = RestingBaselines.(baselineType).cortical_RH.gammaBandPower.(strDay).mean;
                            keyboard
                        else
                            dayBaseline = NaN;
                        end
                    end
                    % pre-allocate array and use for permutation
                    normDayData = RestData.(dataType).(hemDataType).data(dayInds,:,:);
                    % permute to handle both matrix and array (squeeze causes a matrix dimension error if not permuted)
                    dayData = permute(normDayData,unique([2,1,ndims(normDayData)],'stable'));
                    for dD = 1:size(dayData,2)
                        normDayData(dD,:,:) = squeeze(dayData(:,dD,:))./(ones(size(dayData,1),1)*dayBaseline) - 1;
                    end
                    restData(dayInds,:,:) = normDayData;
                end
                RestData.(dataType).(hemDataType).NormData = restData;
            end
        end
    end
end
save([animalID '_RestData.mat'],'RestData','-v7.3')